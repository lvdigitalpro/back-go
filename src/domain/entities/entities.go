// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package entities

import (
	"fmt"
	"io"
	"strconv"
)

type AuthPayload struct {
	AccessToken  string `json:"access_token"`
	RefreshToken string `json:"refresh_token"`
	User         *User  `json:"user"`
}

type InputDeleteProject struct {
	CodProject           int    `json:"cod_project"`
	Password             string `json:"password"`
	PasswordConfirmation string `json:"password_confirmation"`
}

type InputNewProject struct {
	Type        Type   `json:"type"`
	Name        string `json:"name"`
	Description string `json:"description"`
	UserID      string `json:"user_id"`
}

type InputNewUser struct {
	Name                 string  `json:"name"`
	LastName             string  `json:"last_name"`
	BirthDate            string  `json:"birth_date"`
	Email                string  `json:"email"`
	Password             string  `json:"password"`
	PasswordConfirmation string  `json:"password_confirmation"`
	Type                 int     `json:"type"`
	Ir                   string  `json:"ir"`
	Nrle                 *string `json:"nrle,omitempty"`
	EnterpriseName       *string `json:"enterpriseName,omitempty"`
}

type InputUpdateProject struct {
	Type        Type   `json:"type"`
	Name        string `json:"name"`
	Description string `json:"description"`
	CodProject  int    `json:"cod_project"`
}

type InputUpdateUser struct {
	UserID               string  `json:"user_id"`
	Name                 string  `json:"name"`
	LastName             string  `json:"last_name"`
	BirthDate            string  `json:"birth_date"`
	Email                string  `json:"email"`
	Password             string  `json:"password"`
	PasswordConfirmation string  `json:"password_confirmation"`
	Type                 int     `json:"type"`
	Ir                   string  `json:"ir"`
	CreatedAt            string  `json:"created_at"`
	Nrle                 *string `json:"nrle,omitempty"`
	EnterpriseName       *string `json:"enterpriseName,omitempty"`
	OldPassword          *string `json:"old_password,omitempty"`
}

type Project struct {
	CodProject  int     `json:"cod_project"`
	Type        Type    `json:"type"`
	Status      Status  `json:"status"`
	Name        string  `json:"name"`
	Description string  `json:"description"`
	CreatedAt   string  `json:"created_at"`
	UpdatedAt   *string `json:"updated_at,omitempty"`
	StartDate   *string `json:"start_date,omitempty"`
	EndDate     *string `json:"end_date,omitempty"`
	UserID      string  `json:"user_id"`
}

type User struct {
	UserID         string  `json:"user_id"`
	Name           string  `json:"name"`
	LastName       string  `json:"last_name"`
	BirthDate      string  `json:"birth_date"`
	Email          string  `json:"email"`
	Password       string  `json:"password"`
	CreatedAt      string  `json:"createdAt"`
	UpdatedAt      *string `json:"updatedAt,omitempty"`
	Type           int     `json:"type"`
	Ir             string  `json:"ir"`
	Nrle           *string `json:"nrle,omitempty"`
	EnterpriseName *string `json:"enterpriseName,omitempty"`
	CodProject     *int    `json:"cod_project,omitempty"`
}

type Status string

const (
	StatusQueue      Status = "QUEUE"
	StatusInReview   Status = "IN_REVIEW"
	StatusInProgress Status = "IN_PROGRESS"
	StatusDone       Status = "DONE"
)

var AllStatus = []Status{
	StatusQueue,
	StatusInReview,
	StatusInProgress,
	StatusDone,
}

func (e Status) IsValid() bool {
	switch e {
	case StatusQueue, StatusInReview, StatusInProgress, StatusDone:
		return true
	}
	return false
}

func (e Status) String() string {
	return string(e)
}

func (e *Status) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Status(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

func (e Status) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Type string

const (
	TypeWeb     Type = "WEB"
	TypeMobile  Type = "MOBILE"
	TypeDesktop Type = "DESKTOP"
	TypeSystem  Type = "SYSTEM"
	TypeUIUx    Type = "UI_UX"
	TypeOther   Type = "OTHER"
)

var AllType = []Type{
	TypeWeb,
	TypeMobile,
	TypeDesktop,
	TypeSystem,
	TypeUIUx,
	TypeOther,
}

func (e Type) IsValid() bool {
	switch e {
	case TypeWeb, TypeMobile, TypeDesktop, TypeSystem, TypeUIUx, TypeOther:
		return true
	}
	return false
}

func (e Type) String() string {
	return string(e)
}

func (e *Type) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Type(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Type", str)
	}
	return nil
}

func (e Type) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
