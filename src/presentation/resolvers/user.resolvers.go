package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"

	"github.com/lvdigitalpro/back/src/domain/entities"
	"github.com/lvdigitalpro/back/src/graph"
)

// NewUser is the resolver for the newUser field.
func (r *mutationResolver) NewUser(ctx context.Context, input entities.InputNewUser) (string, error) {
	exec, err := r.UserService.NewUser(
		ctx, input,
	)

	if err != nil {
		return "", err
	}

	return *exec, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input entities.InputUpdateUser) (string, error) {
	exec, err := r.UserService.UpdateUser(
		ctx, input,
	)

	if err != nil {
		return "", err
	}

	return *exec, nil
}

// GetUsers is the resolver for the getUsers field.
func (r *queryResolver) GetUsers(ctx context.Context) ([]*entities.User, error) {
	exec, err := r.UserService.GetUsers(ctx)

	if err != nil {
		return nil, err
	}

	return exec, nil
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, userID string) (*entities.User, error) {
	exec, err := r.UserService.GetUser(ctx, userID)

	if err != nil {
		return nil, err
	}

	return exec, nil
}

// GetUserByEmail is the resolver for the getUserByEmail field.
func (r *queryResolver) GetUserByEmail(ctx context.Context, email string) (*entities.User, error) {
	exec, err := r.UserService.GetUserByEmail(ctx, email)

	if err != nil {
		return nil, err
	}

	return exec, nil
}

// GetUserByIr is the resolver for the getUserByIR field.
func (r *queryResolver) GetUserByIr(ctx context.Context, ir string) (*entities.User, error) {
	exec, err := r.UserService.GetUserByIr(ctx, ir)

	if err != nil {
		return nil, err
	}

	return exec, nil
}

// GetUserByProject is the resolver for the getUserByProject field.
func (r *queryResolver) GetUserByProject(ctx context.Context, codProject int) (*entities.User, error) {
	exec, err := r.UserService.GetUserByProject(ctx, codProject)

	if err != nil {
		return nil, err
	}

	return exec, nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
